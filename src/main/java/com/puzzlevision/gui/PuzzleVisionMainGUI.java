package com.puzzlevision.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.puzzlevision.gui.listeners.ComButtonListener;
import com.puzzlevision.gui.listeners.ComKeyListener;
import com.puzzlevision.gui.listeners.ExitListener;
import com.puzzlevision.model.PuzzleVision;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;

/**
 * Created by Brendan on 3/22/2016.
 *
 * This is the Main GUI for the puzzle vision COM connector
 * and image analyzer. This will have 3 different panes, all of
 * which handle different aspects of the project.
 */
public class PuzzleVisionMainGUI {
    private static final Logger logger = LogManager.getLogger(PuzzleVisionMainGUI.class);

    private JFrame rootFrame;
    private JPanel rootPanel;

    private JTabbedPane tabPanel;

    private JPanel comPanel;
    private JPanel controlsPanel;
    private JLabel comPortLabel;
    private JTextField comPortTextField;
    private JLabel baudLabel;
    private JTextField baudTextField;
    private JButton connectButton;
    private JButton clearButton;
    private JButton portListButton;
    private JPanel deviceComPanel;
    private JScrollPane deviceTextScrollPane;
    private JTextArea deviceTextArea;

    private JPanel imageDataPanel;
    private JPanel rawImagePanel;

    private ComButtonListener comButtonListener;
    private ComKeyListener comTextListener;

    private PuzzleVision puzzleVision;

    public PuzzleVisionMainGUI(PuzzleVision puzzleVision) {
        // Call the generated code, don't do this until its finalized
        $$$setupUI$$$();

        logger.info("Attaching a new Puzzle Vision instance to the GUI");
        this.puzzleVision = puzzleVision;

        logger.info("Initializing Listeners");
        this.comButtonListener = new ComButtonListener(this);
        this.comTextListener = new ComKeyListener(this);

        loadTextDefaults();
        attachEventListeners();
        show();
    }

    private void show() {
        rootFrame = new JFrame("Puzzle Vision");
        rootFrame.setContentPane(this.rootPanel);
        rootFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        rootFrame.addWindowListener(new ExitListener());
        rootFrame.pack();
        rootFrame.setVisible(true);
    }

    private void loadTextDefaults() {
        String comPort = PuzzleVision.getSystemProperty("puzzlevision.com.port");
        String baudRate = PuzzleVision.getSystemProperty("puzzlevision.com.baud");

        logger.info("Setting GUI default values to {} and {}", comPort, baudRate);
        comPortTextField.setText(comPort);
        baudTextField.setText(baudRate);
        deviceTextArea.setText("COM defaults set to " + comPort + " and " + baudRate + "\n");
    }

    private void attachEventListeners() {
        // Attach generic button listener to all the buttons on the
        // form. This allows the Puzzle Vision instance to listen to
        // GUI actions.
        connectButton.addActionListener(comButtonListener);
        clearButton.addActionListener(comButtonListener);
        portListButton.addActionListener(comButtonListener);

        // Attach a generic key listener to the text area.
        deviceTextArea.addKeyListener(comTextListener);
    }

    public PuzzleVision getPuzzleVision() {
        return puzzleVision;
    }

    public Integer getBaudRate() {
        return Integer.parseInt(baudTextField.getText());
    }

    public JTextArea getDeviceTextArea() {
        return deviceTextArea;
    }

    public String getComPortName() {
        return comPortTextField.getText().trim();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(1, 1, new Insets(2, 2, 2, 2), 2, 2));
        tabPanel = new JTabbedPane();
        tabPanel.setFont(new Font("SansSerif", Font.BOLD, 22));
        rootPanel.add(tabPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(1400, 800), null, 0, false));
        tabPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createRaisedBevelBorder(), null));
        comPanel = new JPanel();
        comPanel.setLayout(new GridLayoutManager(3, 11, new Insets(0, 0, 0, 0), -1, -1));
        tabPanel.addTab("COM View", comPanel);
        deviceComPanel = new JPanel();
        deviceComPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        deviceComPanel.setFont(new Font("SansSerif", Font.BOLD, 22));
        comPanel.add(deviceComPanel, new GridConstraints(1, 1, 2, 10, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(400, 200), new Dimension(400, 200), null, 0, false));
        deviceComPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Device COM Area", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, new Font("SansSerif", Font.PLAIN, 22)));
        deviceTextScrollPane = new JScrollPane();
        deviceTextScrollPane.setHorizontalScrollBarPolicy(31);
        deviceTextScrollPane.setVerticalScrollBarPolicy(22);
        deviceComPanel.add(deviceTextScrollPane, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        deviceTextArea = new JTextArea();
        deviceTextArea.setBackground(new Color(-16777216));
        deviceTextArea.setCaretColor(new Color(-1));
        deviceTextArea.setColumns(0);
        deviceTextArea.setFont(new Font("SansSerif", Font.PLAIN, 20));
        deviceTextArea.setForeground(new Color(-1));
        deviceTextArea.setLineWrap(true);
        deviceTextArea.setSelectedTextColor(new Color(-6423297));
        deviceTextArea.setSelectionColor(new Color(-8077354));
        deviceTextScrollPane.setViewportView(deviceTextArea);
        final Spacer spacer1 = new Spacer();
        comPanel.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(17, 299), null, 0, false));
        controlsPanel = new JPanel();
        controlsPanel.setLayout(new GridLayoutManager(1, 11, new Insets(0, 0, 0, 0), -1, -1));
        comPanel.add(controlsPanel, new GridConstraints(0, 1, 1, 9, GridConstraints.ANCHOR_SOUTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(1200, 80), null, new Dimension(1200, 80), 1, false));
        connectButton = new JButton();
        connectButton.setFont(new Font("SansSerif", Font.PLAIN, 22));
        connectButton.setText("Connect");
        controlsPanel.add(connectButton, new GridConstraints(0, 6, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        baudTextField = new JTextField();
        baudTextField.setFont(new Font("SansSerif", Font.PLAIN, 22));
        baudTextField.setText("");
        controlsPanel.add(baudTextField, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 1, false));
        baudLabel = new JLabel();
        baudLabel.setFont(new Font("SansSerif", Font.PLAIN, 22));
        baudLabel.setText("Baud Rate:");
        controlsPanel.add(baudLabel, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        controlsPanel.add(spacer2, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, new Dimension(50, 40), null, new Dimension(50, 40), 2, false));
        comPortTextField = new JTextField();
        comPortTextField.setFont(new Font("SansSerif", Font.PLAIN, 22));
        comPortTextField.setText("");
        controlsPanel.add(comPortTextField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 1, false));
        comPortLabel = new JLabel();
        comPortLabel.setFont(new Font("SansSerif", Font.PLAIN, 22));
        comPortLabel.setText("COM Port:");
        controlsPanel.add(comPortLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        controlsPanel.add(spacer3, new GridConstraints(0, 5, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, new Dimension(10, 40), null, new Dimension(10, 40), 2, false));
        final Spacer spacer4 = new Spacer();
        controlsPanel.add(spacer4, new GridConstraints(0, 7, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, new Dimension(10, 40), null, new Dimension(10, 40), 2, false));
        portListButton = new JButton();
        portListButton.setFont(new Font("SansSerif", Font.PLAIN, 22));
        portListButton.setText("Port List");
        controlsPanel.add(portListButton, new GridConstraints(0, 10, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer5 = new Spacer();
        controlsPanel.add(spacer5, new GridConstraints(0, 9, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, new Dimension(20, 40), null, new Dimension(20, -1), 0, false));
        clearButton = new JButton();
        clearButton.setFont(new Font("SansSerif", Font.PLAIN, 22));
        clearButton.setText("Clear");
        controlsPanel.add(clearButton, new GridConstraints(0, 8, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        imageDataPanel = new JPanel();
        imageDataPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabPanel.addTab("Image Data", imageDataPanel);
        rawImagePanel = new JPanel();
        rawImagePanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        tabPanel.addTab("Raw Image", rawImagePanel);
        baudLabel.setLabelFor(baudTextField);
        comPortLabel.setLabelFor(comPortTextField);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }
}
